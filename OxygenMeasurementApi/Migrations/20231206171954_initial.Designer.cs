// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OxygenMeasurementApi.Data.Context;

#nullable disable

namespace OxygenMeasurementApi.Migrations
{
    [DbContext(typeof(OxygenDbContext))]
    [Migration("20231206171954_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OxygenMeasurementApi.Data.Entities.ApiKey", b =>
                {
                    b.Property<int>("ApiKeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ApiKeyId"));

                    b.Property<string>("ApiKeyValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ApiKeyId");

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("OxygenMeasurementApi.Data.Entities.OxygenMeasurement", b =>
                {
                    b.Property<int>("OxygenMeasurementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OxygenMeasurementId"));

                    b.Property<DateTime>("MeasurementTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OxygenMeasurementSystemId")
                        .HasColumnType("integer");

                    b.Property<decimal>("OxygenValue")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)");

                    b.HasKey("OxygenMeasurementId");

                    b.HasIndex("OxygenMeasurementSystemId");

                    b.ToTable("OxygenMeasurements");
                });

            modelBuilder.Entity("OxygenMeasurementApi.Data.Entities.OxygenMeasurementSystem", b =>
                {
                    b.Property<int>("OxygenMeasurementSystemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OxygenMeasurementSystemId"));

                    b.Property<int>("ApiKeyId")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("OxygenMeasurementSystemId");

                    b.HasIndex("ApiKeyId")
                        .IsUnique();

                    b.ToTable("OxygenMeasurementSystems");
                });

            modelBuilder.Entity("OxygenMeasurementApi.Data.Entities.SystemNotificationAdvisor", b =>
                {
                    b.Property<int>("SystemNotificationAdvisorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SystemNotificationAdvisorId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OxygenMeasurementSystemId")
                        .HasColumnType("integer");

                    b.HasKey("SystemNotificationAdvisorId");

                    b.HasIndex("OxygenMeasurementSystemId");

                    b.ToTable("SystemNotificationAdvisors");
                });

            modelBuilder.Entity("OxygenMeasurementApi.Data.Entities.OxygenMeasurement", b =>
                {
                    b.HasOne("OxygenMeasurementApi.Data.Entities.OxygenMeasurementSystem", "OxygenMeasurementSystem")
                        .WithMany("OxygenMeasurements")
                        .HasForeignKey("OxygenMeasurementSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OxygenMeasurementSystem");
                });

            modelBuilder.Entity("OxygenMeasurementApi.Data.Entities.OxygenMeasurementSystem", b =>
                {
                    b.HasOne("OxygenMeasurementApi.Data.Entities.ApiKey", "ApiKey")
                        .WithOne("OxygenMeasurementSystem")
                        .HasForeignKey("OxygenMeasurementApi.Data.Entities.OxygenMeasurementSystem", "ApiKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiKey");
                });

            modelBuilder.Entity("OxygenMeasurementApi.Data.Entities.SystemNotificationAdvisor", b =>
                {
                    b.HasOne("OxygenMeasurementApi.Data.Entities.OxygenMeasurementSystem", "OxygenMeasurementSystem")
                        .WithMany("SystemNotificationAdvisors")
                        .HasForeignKey("OxygenMeasurementSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OxygenMeasurementSystem");
                });

            modelBuilder.Entity("OxygenMeasurementApi.Data.Entities.ApiKey", b =>
                {
                    b.Navigation("OxygenMeasurementSystem")
                        .IsRequired();
                });

            modelBuilder.Entity("OxygenMeasurementApi.Data.Entities.OxygenMeasurementSystem", b =>
                {
                    b.Navigation("OxygenMeasurements");

                    b.Navigation("SystemNotificationAdvisors");
                });
#pragma warning restore 612, 618
        }
    }
}
